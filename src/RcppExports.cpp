// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// initialize_from_hdf5_sparse
SEXP initialize_from_hdf5_sparse(std::string file, std::string name, size_t nrow, size_t ncol, bool csr, int cache_size);
RcppExport SEXP _beachmat_hdf5_initialize_from_hdf5_sparse(SEXP fileSEXP, SEXP nameSEXP, SEXP nrowSEXP, SEXP ncolSEXP, SEXP csrSEXP, SEXP cache_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< size_t >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< size_t >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< bool >::type csr(csrSEXP);
    Rcpp::traits::input_parameter< int >::type cache_size(cache_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(initialize_from_hdf5_sparse(file, name, nrow, ncol, csr, cache_size));
    return rcpp_result_gen;
END_RCPP
}
// initialize_from_hdf5_dense
SEXP initialize_from_hdf5_dense(std::string file, std::string name, bool transpose, int cache_size);
RcppExport SEXP _beachmat_hdf5_initialize_from_hdf5_dense(SEXP fileSEXP, SEXP nameSEXP, SEXP transposeSEXP, SEXP cache_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< bool >::type transpose(transposeSEXP);
    Rcpp::traits::input_parameter< int >::type cache_size(cache_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(initialize_from_hdf5_dense(file, name, transpose, cache_size));
    return rcpp_result_gen;
END_RCPP
}
// load_into_memory_sparse
SEXP load_into_memory_sparse(std::string file, std::string name, int nrow, int ncol, bool csr, bool forced_int);
RcppExport SEXP _beachmat_hdf5_load_into_memory_sparse(SEXP fileSEXP, SEXP nameSEXP, SEXP nrowSEXP, SEXP ncolSEXP, SEXP csrSEXP, SEXP forced_intSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< bool >::type csr(csrSEXP);
    Rcpp::traits::input_parameter< bool >::type forced_int(forced_intSEXP);
    rcpp_result_gen = Rcpp::wrap(load_into_memory_sparse(file, name, nrow, ncol, csr, forced_int));
    return rcpp_result_gen;
END_RCPP
}
// load_into_memory_dense
SEXP load_into_memory_dense(std::string file, std::string name, bool forced_int, bool transpose);
RcppExport SEXP _beachmat_hdf5_load_into_memory_dense(SEXP fileSEXP, SEXP nameSEXP, SEXP forced_intSEXP, SEXP transposeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< bool >::type forced_int(forced_intSEXP);
    Rcpp::traits::input_parameter< bool >::type transpose(transposeSEXP);
    rcpp_result_gen = Rcpp::wrap(load_into_memory_dense(file, name, forced_int, transpose));
    return rcpp_result_gen;
END_RCPP
}
// load_into_memory_dense_as_sparse
SEXP load_into_memory_dense_as_sparse(std::string file, std::string name, bool forced_int, bool transpose, int cache_size, bool byrow);
RcppExport SEXP _beachmat_hdf5_load_into_memory_dense_as_sparse(SEXP fileSEXP, SEXP nameSEXP, SEXP forced_intSEXP, SEXP transposeSEXP, SEXP cache_sizeSEXP, SEXP byrowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< bool >::type forced_int(forced_intSEXP);
    Rcpp::traits::input_parameter< bool >::type transpose(transposeSEXP);
    Rcpp::traits::input_parameter< int >::type cache_size(cache_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type byrow(byrowSEXP);
    rcpp_result_gen = Rcpp::wrap(load_into_memory_dense_as_sparse(file, name, forced_int, transpose, cache_size, byrow));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_beachmat_hdf5_initialize_from_hdf5_sparse", (DL_FUNC) &_beachmat_hdf5_initialize_from_hdf5_sparse, 6},
    {"_beachmat_hdf5_initialize_from_hdf5_dense", (DL_FUNC) &_beachmat_hdf5_initialize_from_hdf5_dense, 4},
    {"_beachmat_hdf5_load_into_memory_sparse", (DL_FUNC) &_beachmat_hdf5_load_into_memory_sparse, 6},
    {"_beachmat_hdf5_load_into_memory_dense", (DL_FUNC) &_beachmat_hdf5_load_into_memory_dense, 4},
    {"_beachmat_hdf5_load_into_memory_dense_as_sparse", (DL_FUNC) &_beachmat_hdf5_load_into_memory_dense_as_sparse, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_beachmat_hdf5(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
